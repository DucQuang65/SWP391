import React, { useState, useEffect } from 'react';
import ManagerSidebar from '../../components/manager/ManagerSidebar';
import { 
  mockDonationHistory, 
  mockUsers,
  BLOOD_GROUPS,
  RH_TYPES,
  COMPONENT_TYPES 
} from '../../services/mockData';
import '../../styles/pages/DonationProcessManagement.scss';

const DonationProcessManagement = () => {
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [filters, setFilters] = useState({
    status: 'all',
    bloodType: 'all',
    dateRange: 'all'
  });
  const [selectedDonation, setSelectedDonation] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newDonation, setNewDonation] = useState({
    userID: '',
    bloodGroup: '',
    rhType: '',
    componentType: COMPONENT_TYPES.WHOLE,
    quantity: 450,
    notes: ''
  });

  // Donation statuses for the process
  const DONATION_STATUS = {
    REGISTERED: 'registered',
    MEDICAL_CHECK: 'medical_check',
    DONATED: 'donated',
    TESTING: 'testing',
    COMPLETED: 'completed',
    REJECTED: 'rejected'
  };

  useEffect(() => {
    // Load donation history with enhanced status
    const enhancedDonations = mockDonationHistory.map(donation => ({
      ...donation,
      status: donation.isSuccessful ? DONATION_STATUS.COMPLETED : DONATION_STATUS.TESTING,
      donorName: mockUsers.find(u => u.userID === donation.userID)?.name || 'Unknown'
    }));
    setDonations(enhancedDonations);
    setFilteredDonations(enhancedDonations);
  }, []);

  useEffect(() => {
    // Apply filters
    let filtered = donations;

    if (filters.status !== 'all') {
      filtered = filtered.filter(donation => donation.status === filters.status);
    }

    if (filters.bloodType !== 'all') {
      filtered = filtered.filter(donation => donation.bloodType === filters.bloodType);
    }

    if (filters.dateRange !== 'all') {
      const now = new Date();
      const filterDate = new Date();
      
      switch (filters.dateRange) {
        case 'today':
          filterDate.setHours(0, 0, 0, 0);
          break;
        case 'week':
          filterDate.setDate(now.getDate() - 7);
          break;
        case 'month':
          filterDate.setMonth(now.getMonth() - 1);
          break;
        default:
          filterDate = null;
      }

      if (filterDate) {
        filtered = filtered.filter(donation => 
          new Date(donation.donationDate) >= filterDate
        );
      }
    }

    setFilteredDonations(filtered);
  }, [filters, donations]);

  const getStatusText = (status) => {
    switch (status) {
      case DONATION_STATUS.REGISTERED: return 'ƒêƒÉng k√Ω th√†nh c√¥ng';
      case DONATION_STATUS.MEDICAL_CHECK: return 'ƒê√£ kh√°m';
      case DONATION_STATUS.DONATED: return 'ƒê√£ hi·∫øn m√°u';
      case DONATION_STATUS.TESTING: return 'X√©t nghi·ªám';
      case DONATION_STATUS.COMPLETED: return 'Ho√†n th√†nh';
      case DONATION_STATUS.REJECTED: return 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case DONATION_STATUS.REGISTERED: return 'info';
      case DONATION_STATUS.MEDICAL_CHECK: return 'warning';
      case DONATION_STATUS.DONATED: return 'primary';
      case DONATION_STATUS.TESTING: return 'warning';
      case DONATION_STATUS.COMPLETED: return 'success';
      case DONATION_STATUS.REJECTED: return 'danger';
      default: return 'secondary';
    }
  };

  const handleStatusChange = (donationId, newStatus) => {
    setDonations(prev => prev.map(donation => 
      donation.donationID === donationId 
        ? { ...donation, status: newStatus }
        : donation
    ));
  };

  const handleViewDetails = (donation) => {
    setSelectedDonation(donation);
    setShowModal(true);
  };

  const handleAddDonation = () => {
    const donation = {
      donationID: donations.length + 1,
      userID: parseInt(newDonation.userID),
      donationDate: new Date().toISOString(),
      bloodGroup: newDonation.bloodGroup,
      rhType: newDonation.rhType,
      bloodType: `${newDonation.bloodGroup}${newDonation.rhType}`,
      componentType: newDonation.componentType,
      quantity: newDonation.quantity,
      isSuccessful: false,
      notes: newDonation.notes,
      status: DONATION_STATUS.REGISTERED,
      donorName: mockUsers.find(u => u.userID === parseInt(newDonation.userID))?.name || 'Unknown'
    };

    setDonations(prev => [...prev, donation]);
    setShowAddModal(false);
    setNewDonation({
      userID: '',
      bloodGroup: '',
      rhType: '',
      componentType: COMPONENT_TYPES.WHOLE,
      quantity: 450,
      notes: ''
    });
  };

  const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];

  return (
    <div className="donation-process-management">
      <ManagerSidebar />
      
      <div className="donation-process-content">
        <div className="page-header">
          <h1>ü©∏ Qu·∫£n l√Ω Quy tr√¨nh Hi·∫øn m√°u</h1>
          <p>Theo d√µi v√† qu·∫£n l√Ω to√†n b·ªô quy tr√¨nh hi·∫øn m√°u t·ª´ ƒëƒÉng k√Ω ƒë·∫øn ho√†n th√†nh</p>
          <button 
            className="btn btn-primary"
            onClick={() => setShowAddModal(true)}
          >
            + Th√™m ƒëƒÉng k√Ω hi·∫øn m√°u
          </button>
        </div>

        {/* Process Flow */}
        <div className="process-flow">
          <div className="flow-step">
            <div className="step-icon">üìù</div>
            <div className="step-title">ƒêƒÉng k√Ω</div>
          </div>
          <div className="flow-arrow">‚Üí</div>
          <div className="flow-step">
            <div className="step-icon">üè•</div>
            <div className="step-title">Kh√°m s√†ng l·ªçc</div>
          </div>
          <div className="flow-arrow">‚Üí</div>
          <div className="flow-step">
            <div className="step-icon">ü©∏</div>
            <div className="step-title">Hi·∫øn m√°u</div>
          </div>
          <div className="flow-arrow">‚Üí</div>
          <div className="flow-step">
            <div className="step-icon">üî¨</div>
            <div className="step-title">X√©t nghi·ªám</div>
          </div>
          <div className="flow-arrow">‚Üí</div>
          <div className="flow-step">
            <div className="step-icon">‚úÖ</div>
            <div className="step-title">Ho√†n th√†nh</div>
          </div>
        </div>

        {/* Filters */}
        <div className="filters-section">
          <div className="filter-group">
            <label>Tr·∫°ng th√°i:</label>
            <select 
              value={filters.status} 
              onChange={(e) => setFilters(prev => ({...prev, status: e.target.value}))}
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value={DONATION_STATUS.REGISTERED}>ƒêƒÉng k√Ω th√†nh c√¥ng</option>
              <option value={DONATION_STATUS.MEDICAL_CHECK}>ƒê√£ kh√°m</option>
              <option value={DONATION_STATUS.DONATED}>ƒê√£ hi·∫øn m√°u</option>
              <option value={DONATION_STATUS.TESTING}>X√©t nghi·ªám</option>
              <option value={DONATION_STATUS.COMPLETED}>Ho√†n th√†nh</option>
              <option value={DONATION_STATUS.REJECTED}>Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán</option>
            </select>
          </div>

          <div className="filter-group">
            <label>Nh√≥m m√°u:</label>
            <select 
              value={filters.bloodType} 
              onChange={(e) => setFilters(prev => ({...prev, bloodType: e.target.value}))}
            >
              <option value="all">T·∫•t c·∫£</option>
              {bloodTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>

          <div className="filter-group">
            <label>Th·ªùi gian:</label>
            <select 
              value={filters.dateRange} 
              onChange={(e) => setFilters(prev => ({...prev, dateRange: e.target.value}))}
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="today">H√¥m nay</option>
              <option value="week">7 ng√†y qua</option>
              <option value="month">30 ng√†y qua</option>
            </select>
          </div>
        </div>

        {/* Donations Table */}
        <div className="donations-table-container">
          <table className="donations-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Ng∆∞·ªùi hi·∫øn</th>
                <th>Nh√≥m m√°u</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>Ng√†y hi·∫øn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {filteredDonations.map(donation => (
                <tr key={donation.donationID}>
                  <td>#{donation.donationID}</td>
                  <td>{donation.donorName}</td>
                  <td>
                    <span className="blood-type-badge">{donation.bloodType}</span>
                  </td>
                  <td>{donation.quantity}ml</td>
                  <td>{new Date(donation.donationDate).toLocaleDateString('vi-VN')}</td>
                  <td>
                    <span className={`status-badge status-${getStatusColor(donation.status)}`}>
                      {getStatusText(donation.status)}
                    </span>
                  </td>
                  <td>
                    <div className="action-buttons">
                      <button 
                        className="btn btn-info btn-sm"
                        onClick={() => handleViewDetails(donation)}
                      >
                        Chi ti·∫øt
                      </button>
                      {donation.status === DONATION_STATUS.REGISTERED && (
                        <button 
                          className="btn btn-warning btn-sm"
                          onClick={() => handleStatusChange(donation.donationID, DONATION_STATUS.MEDICAL_CHECK)}
                        >
                          Kh√°m s√†ng l·ªçc
                        </button>
                      )}
                      {donation.status === DONATION_STATUS.MEDICAL_CHECK && (
                        <>
                          <button 
                            className="btn btn-primary btn-sm"
                            onClick={() => handleStatusChange(donation.donationID, DONATION_STATUS.DONATED)}
                          >
                            Hi·∫øn m√°u
                          </button>
                          <button 
                            className="btn btn-danger btn-sm"
                            onClick={() => handleStatusChange(donation.donationID, DONATION_STATUS.REJECTED)}
                          >
                            Kh√¥ng ƒë·ªß ƒêK
                          </button>
                        </>
                      )}
                      {donation.status === DONATION_STATUS.DONATED && (
                        <button 
                          className="btn btn-warning btn-sm"
                          onClick={() => handleStatusChange(donation.donationID, DONATION_STATUS.TESTING)}
                        >
                          X√©t nghi·ªám
                        </button>
                      )}
                      {donation.status === DONATION_STATUS.TESTING && (
                        <button 
                          className="btn btn-success btn-sm"
                          onClick={() => handleStatusChange(donation.donationID, DONATION_STATUS.COMPLETED)}
                        >
                          Ho√†n th√†nh
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Statistics */}
        <div className="statistics-section">
          <div className="stat-card">
            <h3>T·ªïng ƒëƒÉng k√Ω</h3>
            <p className="stat-number">{donations.length}</p>
          </div>
          <div className="stat-card">
            <h3>ƒêang x·ª≠ l√Ω</h3>
            <p className="stat-number warning">
              {donations.filter(d => [DONATION_STATUS.REGISTERED, DONATION_STATUS.MEDICAL_CHECK, DONATION_STATUS.DONATED, DONATION_STATUS.TESTING].includes(d.status)).length}
            </p>
          </div>
          <div className="stat-card">
            <h3>Ho√†n th√†nh</h3>
            <p className="stat-number success">
              {donations.filter(d => d.status === DONATION_STATUS.COMPLETED).length}
            </p>
          </div>
          <div className="stat-card">
            <h3>Kh√¥ng ƒë·ªß ƒêK</h3>
            <p className="stat-number danger">
              {donations.filter(d => d.status === DONATION_STATUS.REJECTED).length}
            </p>
          </div>
        </div>
      </div>

      {/* Detail Modal */}
      {showModal && selectedDonation && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Chi ti·∫øt Hi·∫øn m√°u #{selectedDonation.donationID}</h2>
              <button className="close-btn" onClick={() => setShowModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="detail-row">
                <strong>Ng∆∞·ªùi hi·∫øn:</strong> {selectedDonation.donorName}
              </div>
              <div className="detail-row">
                <strong>Nh√≥m m√°u:</strong> {selectedDonation.bloodType}
              </div>
              <div className="detail-row">
                <strong>Th√†nh ph·∫ßn:</strong> {selectedDonation.componentType}
              </div>
              <div className="detail-row">
                <strong>S·ªë l∆∞·ª£ng:</strong> {selectedDonation.quantity}ml
              </div>
              <div className="detail-row">
                <strong>Ng√†y hi·∫øn:</strong> {new Date(selectedDonation.donationDate).toLocaleString('vi-VN')}
              </div>
              <div className="detail-row">
                <strong>Tr·∫°ng th√°i:</strong> 
                <span className={`status-badge status-${getStatusColor(selectedDonation.status)}`}>
                  {getStatusText(selectedDonation.status)}
                </span>
              </div>
              {selectedDonation.notes && (
                <div className="detail-row">
                  <strong>Ghi ch√∫:</strong> {selectedDonation.notes}
                </div>
              )}
              {selectedDonation.testResults && (
                <div className="detail-row">
                  <strong>K·∫øt qu·∫£ x√©t nghi·ªám:</strong>
                  <div className="test-results">
                    <div>HIV: {selectedDonation.testResults.hiv}</div>
                    <div>Hepatitis B: {selectedDonation.testResults.hepatitisB}</div>
                    <div>Hepatitis C: {selectedDonation.testResults.hepatitisC}</div>
                    <div>Syphilis: {selectedDonation.testResults.syphilis}</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Add Donation Modal */}
      {showAddModal && (
        <div className="modal-overlay" onClick={() => setShowAddModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Th√™m ƒëƒÉng k√Ω hi·∫øn m√°u</h2>
              <button className="close-btn" onClick={() => setShowAddModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="form-group">
                <label>Ng∆∞·ªùi hi·∫øn:</label>
                <select 
                  value={newDonation.userID}
                  onChange={(e) => setNewDonation(prev => ({...prev, userID: e.target.value}))}
                >
                  <option value="">Ch·ªçn ng∆∞·ªùi hi·∫øn</option>
                  {mockUsers.filter(u => u.role === 'Member').map(user => (
                    <option key={user.userID} value={user.userID}>
                      {user.name} - {user.bloodGroup}{user.rhType}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>Nh√≥m m√°u:</label>
                <select 
                  value={newDonation.bloodGroup}
                  onChange={(e) => setNewDonation(prev => ({...prev, bloodGroup: e.target.value}))}
                >
                  <option value="">Ch·ªçn nh√≥m m√°u</option>
                  {Object.values(BLOOD_GROUPS).map(group => (
                    <option key={group} value={group}>{group}</option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>Rh:</label>
                <select 
                  value={newDonation.rhType}
                  onChange={(e) => setNewDonation(prev => ({...prev, rhType: e.target.value}))}
                >
                  <option value="">Ch·ªçn Rh</option>
                  {Object.values(RH_TYPES).map(rh => (
                    <option key={rh} value={rh}>{rh}</option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>Th√†nh ph·∫ßn:</label>
                <select 
                  value={newDonation.componentType}
                  onChange={(e) => setNewDonation(prev => ({...prev, componentType: e.target.value}))}
                >
                  {Object.values(COMPONENT_TYPES).map(component => (
                    <option key={component} value={component}>{component}</option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>S·ªë l∆∞·ª£ng (ml):</label>
                <input 
                  type="number"
                  value={newDonation.quantity}
                  onChange={(e) => setNewDonation(prev => ({...prev, quantity: parseInt(e.target.value)}))}
                  min="200"
                  max="500"
                />
              </div>
              <div className="form-group">
                <label>Ghi ch√∫:</label>
                <textarea 
                  value={newDonation.notes}
                  onChange={(e) => setNewDonation(prev => ({...prev, notes: e.target.value}))}
                  rows="3"
                />
              </div>
              <div className="modal-actions">
                <button className="btn btn-secondary" onClick={() => setShowAddModal(false)}>
                  H·ªßy
                </button>
                <button 
                  className="btn btn-primary"
                  onClick={handleAddDonation}
                  disabled={!newDonation.userID || !newDonation.bloodGroup || !newDonation.rhType}
                >
                  Th√™m
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DonationProcessManagement;
